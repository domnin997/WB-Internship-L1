// Задача 22

// Посчитайте сколько раз можно вызвать функцию document.write() внутри
// document.write(). Объясните результат.

// Решение 1

function outerFunc () {
// Создадим функцию, которая будет содержать внутри себя:
// 1) счетчик количества вызовов внутренней функции
    let i = 0;
// 2) внутреннюю функцию которая рекурсивно вызывает себя же
// то есть, вызывает document.write внутри document.write  
    return function callWrite2 () {
        i++
        try {
            document.write(`${i}`, callWrite2());  
        } catch (e) {
            // будем отлавливать ошибку
            console.log(`Ошибка: ${e}`, i);
        }
    }
}

let newFunc = outerFunc();
newFunc();

// итог в хроме - 8371 вызов; затем переполняется callstack.
// Как в предыдущей задаче, если добавить переменных, то число снизится из-за возросших затрат памяти.

// Решение 2

// Вызывать в цикле функцию document.write внутри document.write (то есть, друг за другом, а не рекурсивно).
// Цикл будет бесконечным (если его не ограничить), а браузер зависнет без отображения чего-либо
// на странице, т.к. document.write работает до загрузки страницы, а в этом случае сам же эту загрузку блокирует

function callWrite3 () {
    for (let i = 0; i < 1000000; i++) {
        document.write(`${i} `);
    }
}

document.write(callWrite3());

// P.S. Я нашел статью на habr - https://habr.com/ru/articles/305366/ (2016 г.), в которой говорится о том,
// что вложенный вызов document.write() ограничен технически на стороне браузера - от 20 до 21 вызова.
// Возможно, я неправильно трактую вложенный вызов, но в моем случае он ограничен callstack либо параметрами цикла.